'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4927.
'
Namespace org.lyricwiki
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="LyricWikiBinding", [Namespace]:="urn:LyricWiki")>  _
    Partial Public Class LyricWiki
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private checkSongExistsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private searchArtistsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private searchAlbumsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private searchSongsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSOTDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSongOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSongResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getArtistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAlbumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getHometownOperationCompleted As System.Threading.SendOrPostCallback
        
        Private postArtistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private postAlbumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private postSongOperationCompleted As System.Threading.SendOrPostCallback
        
        Private postSong_flagsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.iTSfv.My.MySettings.Default.iTSfv_org_lyricwiki_LyricWiki
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event checkSongExistsCompleted As checkSongExistsCompletedEventHandler
        
        '''<remarks/>
        Public Event searchArtistsCompleted As searchArtistsCompletedEventHandler
        
        '''<remarks/>
        Public Event searchAlbumsCompleted As searchAlbumsCompletedEventHandler
        
        '''<remarks/>
        Public Event searchSongsCompleted As searchSongsCompletedEventHandler
        
        '''<remarks/>
        Public Event getSOTDCompleted As getSOTDCompletedEventHandler
        
        '''<remarks/>
        Public Event getSongCompleted As getSongCompletedEventHandler
        
        '''<remarks/>
        Public Event getSongResultCompleted As getSongResultCompletedEventHandler
        
        '''<remarks/>
        Public Event getArtistCompleted As getArtistCompletedEventHandler
        
        '''<remarks/>
        Public Event getAlbumCompleted As getAlbumCompletedEventHandler
        
        '''<remarks/>
        Public Event getHometownCompleted As getHometownCompletedEventHandler
        
        '''<remarks/>
        Public Event postArtistCompleted As postArtistCompletedEventHandler
        
        '''<remarks/>
        Public Event postAlbumCompleted As postAlbumCompletedEventHandler
        
        '''<remarks/>
        Public Event postSongCompleted As postSongCompletedEventHandler
        
        '''<remarks/>
        Public Event postSong_flagsCompleted As postSong_flagsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#checkSongExists", RequestNamespace:="urn:LyricWiki", ResponseNamespace:="urn:LyricWiki")>  _
        Public Function checkSongExists(ByVal artist As String, ByVal song As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("checkSongExists", New Object() {artist, song})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkSongExistsAsync(ByVal artist As String, ByVal song As String)
            Me.checkSongExistsAsync(artist, song, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkSongExistsAsync(ByVal artist As String, ByVal song As String, ByVal userState As Object)
            If (Me.checkSongExistsOperationCompleted Is Nothing) Then
                Me.checkSongExistsOperationCompleted = AddressOf Me.OncheckSongExistsOperationCompleted
            End If
            Me.InvokeAsync("checkSongExists", New Object() {artist, song}, Me.checkSongExistsOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckSongExistsOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkSongExistsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkSongExistsCompleted(Me, New checkSongExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#searchArtists", RequestNamespace:="urn:LyricWiki", ResponseNamespace:="urn:LyricWiki")>  _
        Public Function searchArtists(ByVal searchString As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String()
            Dim results() As Object = Me.Invoke("searchArtists", New Object() {searchString})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub searchArtistsAsync(ByVal searchString As String)
            Me.searchArtistsAsync(searchString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub searchArtistsAsync(ByVal searchString As String, ByVal userState As Object)
            If (Me.searchArtistsOperationCompleted Is Nothing) Then
                Me.searchArtistsOperationCompleted = AddressOf Me.OnsearchArtistsOperationCompleted
            End If
            Me.InvokeAsync("searchArtists", New Object() {searchString}, Me.searchArtistsOperationCompleted, userState)
        End Sub
        
        Private Sub OnsearchArtistsOperationCompleted(ByVal arg As Object)
            If (Not (Me.searchArtistsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent searchArtistsCompleted(Me, New searchArtistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#searchAlbums", RequestNamespace:="urn:LyricWiki", ResponseNamespace:="urn:LyricWiki")>  _
        Public Function searchAlbums(ByVal artist As String, ByVal album As String, ByVal year As Integer) As <System.Xml.Serialization.SoapElementAttribute("return")> String()
            Dim results() As Object = Me.Invoke("searchAlbums", New Object() {artist, album, year})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub searchAlbumsAsync(ByVal artist As String, ByVal album As String, ByVal year As Integer)
            Me.searchAlbumsAsync(artist, album, year, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub searchAlbumsAsync(ByVal artist As String, ByVal album As String, ByVal year As Integer, ByVal userState As Object)
            If (Me.searchAlbumsOperationCompleted Is Nothing) Then
                Me.searchAlbumsOperationCompleted = AddressOf Me.OnsearchAlbumsOperationCompleted
            End If
            Me.InvokeAsync("searchAlbums", New Object() {artist, album, year}, Me.searchAlbumsOperationCompleted, userState)
        End Sub
        
        Private Sub OnsearchAlbumsOperationCompleted(ByVal arg As Object)
            If (Not (Me.searchAlbumsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent searchAlbumsCompleted(Me, New searchAlbumsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#searchSongs", RequestNamespace:="urn:LyricWiki", ResponseNamespace:="urn:LyricWiki")>  _
        Public Function searchSongs(ByVal artist As String, ByVal song As String) As <System.Xml.Serialization.SoapElementAttribute("return")> SongResult
            Dim results() As Object = Me.Invoke("searchSongs", New Object() {artist, song})
            Return CType(results(0),SongResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub searchSongsAsync(ByVal artist As String, ByVal song As String)
            Me.searchSongsAsync(artist, song, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub searchSongsAsync(ByVal artist As String, ByVal song As String, ByVal userState As Object)
            If (Me.searchSongsOperationCompleted Is Nothing) Then
                Me.searchSongsOperationCompleted = AddressOf Me.OnsearchSongsOperationCompleted
            End If
            Me.InvokeAsync("searchSongs", New Object() {artist, song}, Me.searchSongsOperationCompleted, userState)
        End Sub
        
        Private Sub OnsearchSongsOperationCompleted(ByVal arg As Object)
            If (Not (Me.searchSongsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent searchSongsCompleted(Me, New searchSongsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#getSOTD", RequestNamespace:="urn:LyricWiki", ResponseNamespace:="urn:LyricWiki")>  _
        Public Function getSOTD() As <System.Xml.Serialization.SoapElementAttribute("return")> SOTDResult
            Dim results() As Object = Me.Invoke("getSOTD", New Object(-1) {})
            Return CType(results(0),SOTDResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSOTDAsync()
            Me.getSOTDAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSOTDAsync(ByVal userState As Object)
            If (Me.getSOTDOperationCompleted Is Nothing) Then
                Me.getSOTDOperationCompleted = AddressOf Me.OngetSOTDOperationCompleted
            End If
            Me.InvokeAsync("getSOTD", New Object(-1) {}, Me.getSOTDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSOTDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSOTDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSOTDCompleted(Me, New getSOTDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#getSong", RequestNamespace:="urn:LyricWiki", ResponseNamespace:="urn:LyricWiki")>  _
        Public Function getSong(ByVal artist As String, ByVal song As String) As <System.Xml.Serialization.SoapElementAttribute("return")> LyricsResult
            Dim results() As Object = Me.Invoke("getSong", New Object() {artist, song})
            Return CType(results(0),LyricsResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSongAsync(ByVal artist As String, ByVal song As String)
            Me.getSongAsync(artist, song, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSongAsync(ByVal artist As String, ByVal song As String, ByVal userState As Object)
            If (Me.getSongOperationCompleted Is Nothing) Then
                Me.getSongOperationCompleted = AddressOf Me.OngetSongOperationCompleted
            End If
            Me.InvokeAsync("getSong", New Object() {artist, song}, Me.getSongOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSongOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSongCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSongCompleted(Me, New getSongCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#getSongResult", RequestNamespace:="urn:LyricWiki", ResponseNamespace:="urn:LyricWiki")>  _
        Public Function getSongResult(ByVal artist As String, ByVal song As String) As <System.Xml.Serialization.SoapElementAttribute("songResult")> LyricsResult
            Dim results() As Object = Me.Invoke("getSongResult", New Object() {artist, song})
            Return CType(results(0),LyricsResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSongResultAsync(ByVal artist As String, ByVal song As String)
            Me.getSongResultAsync(artist, song, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSongResultAsync(ByVal artist As String, ByVal song As String, ByVal userState As Object)
            If (Me.getSongResultOperationCompleted Is Nothing) Then
                Me.getSongResultOperationCompleted = AddressOf Me.OngetSongResultOperationCompleted
            End If
            Me.InvokeAsync("getSongResult", New Object() {artist, song}, Me.getSongResultOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSongResultOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSongResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSongResultCompleted(Me, New getSongResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#getArtist", RequestNamespace:="urn:LyricWiki", ResponseNamespace:="urn:LyricWiki")>  _
        Public Function getArtist(ByRef artist As String) As <System.Xml.Serialization.SoapElementAttribute("albums")> String()
            Dim results() As Object = Me.Invoke("getArtist", New Object() {artist})
            artist = CType(results(1),String)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getArtistAsync(ByVal artist As String)
            Me.getArtistAsync(artist, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getArtistAsync(ByVal artist As String, ByVal userState As Object)
            If (Me.getArtistOperationCompleted Is Nothing) Then
                Me.getArtistOperationCompleted = AddressOf Me.OngetArtistOperationCompleted
            End If
            Me.InvokeAsync("getArtist", New Object() {artist}, Me.getArtistOperationCompleted, userState)
        End Sub
        
        Private Sub OngetArtistOperationCompleted(ByVal arg As Object)
            If (Not (Me.getArtistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getArtistCompleted(Me, New getArtistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#getAlbum", RequestNamespace:="urn:LyricWiki", ResponseNamespace:="urn:LyricWiki")>  _
        Public Function getAlbum(ByRef artist As String, ByRef album As String, ByRef year As Integer, ByRef songs() As String) As <System.Xml.Serialization.SoapElementAttribute("amazonLink")> String
            Dim results() As Object = Me.Invoke("getAlbum", New Object() {artist, album, year})
            artist = CType(results(1),String)
            album = CType(results(2),String)
            year = CType(results(3),Integer)
            songs = CType(results(4),String())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAlbumAsync(ByVal artist As String, ByVal album As String, ByVal year As Integer)
            Me.getAlbumAsync(artist, album, year, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAlbumAsync(ByVal artist As String, ByVal album As String, ByVal year As Integer, ByVal userState As Object)
            If (Me.getAlbumOperationCompleted Is Nothing) Then
                Me.getAlbumOperationCompleted = AddressOf Me.OngetAlbumOperationCompleted
            End If
            Me.InvokeAsync("getAlbum", New Object() {artist, album, year}, Me.getAlbumOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAlbumOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAlbumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAlbumCompleted(Me, New getAlbumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#getHometown", RequestNamespace:="urn:LyricWiki", ResponseNamespace:="urn:LyricWiki")>  _
        Public Function getHometown(ByVal artist As String, ByRef state As String, ByRef hometown As String) As <System.Xml.Serialization.SoapElementAttribute("country")> String
            Dim results() As Object = Me.Invoke("getHometown", New Object() {artist})
            state = CType(results(1),String)
            hometown = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getHometownAsync(ByVal artist As String)
            Me.getHometownAsync(artist, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getHometownAsync(ByVal artist As String, ByVal userState As Object)
            If (Me.getHometownOperationCompleted Is Nothing) Then
                Me.getHometownOperationCompleted = AddressOf Me.OngetHometownOperationCompleted
            End If
            Me.InvokeAsync("getHometown", New Object() {artist}, Me.getHometownOperationCompleted, userState)
        End Sub
        
        Private Sub OngetHometownOperationCompleted(ByVal arg As Object)
            If (Not (Me.getHometownCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getHometownCompleted(Me, New getHometownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#postArtist", RequestNamespace:="urn:LyricWiki", ResponseNamespace:="urn:LyricWiki")>  _
        Public Function postArtist(ByVal overwriteIfExists As Boolean, ByRef artist As String, ByVal albums() As String, ByRef message As String) As <System.Xml.Serialization.SoapElementAttribute("dataUsed")> Boolean
            Dim results() As Object = Me.Invoke("postArtist", New Object() {overwriteIfExists, artist, albums})
            artist = CType(results(1),String)
            message = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub postArtistAsync(ByVal overwriteIfExists As Boolean, ByVal artist As String, ByVal albums() As String)
            Me.postArtistAsync(overwriteIfExists, artist, albums, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub postArtistAsync(ByVal overwriteIfExists As Boolean, ByVal artist As String, ByVal albums() As String, ByVal userState As Object)
            If (Me.postArtistOperationCompleted Is Nothing) Then
                Me.postArtistOperationCompleted = AddressOf Me.OnpostArtistOperationCompleted
            End If
            Me.InvokeAsync("postArtist", New Object() {overwriteIfExists, artist, albums}, Me.postArtistOperationCompleted, userState)
        End Sub
        
        Private Sub OnpostArtistOperationCompleted(ByVal arg As Object)
            If (Not (Me.postArtistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent postArtistCompleted(Me, New postArtistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#postAlbum", RequestNamespace:="urn:LyricWiki", ResponseNamespace:="urn:LyricWiki")>  _
        Public Function postAlbum(ByVal overwriteIfExists As Boolean, ByRef artist As String, ByRef album As String, ByRef year As Integer, ByVal asin As String, ByVal songs() As String, ByRef message As String) As <System.Xml.Serialization.SoapElementAttribute("dataUsed")> Boolean
            Dim results() As Object = Me.Invoke("postAlbum", New Object() {overwriteIfExists, artist, album, year, asin, songs})
            artist = CType(results(1),String)
            album = CType(results(2),String)
            year = CType(results(3),Integer)
            message = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub postAlbumAsync(ByVal overwriteIfExists As Boolean, ByVal artist As String, ByVal album As String, ByVal year As Integer, ByVal asin As String, ByVal songs() As String)
            Me.postAlbumAsync(overwriteIfExists, artist, album, year, asin, songs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub postAlbumAsync(ByVal overwriteIfExists As Boolean, ByVal artist As String, ByVal album As String, ByVal year As Integer, ByVal asin As String, ByVal songs() As String, ByVal userState As Object)
            If (Me.postAlbumOperationCompleted Is Nothing) Then
                Me.postAlbumOperationCompleted = AddressOf Me.OnpostAlbumOperationCompleted
            End If
            Me.InvokeAsync("postAlbum", New Object() {overwriteIfExists, artist, album, year, asin, songs}, Me.postAlbumOperationCompleted, userState)
        End Sub
        
        Private Sub OnpostAlbumOperationCompleted(ByVal arg As Object)
            If (Not (Me.postAlbumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent postAlbumCompleted(Me, New postAlbumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#postSong", RequestNamespace:="urn:LyricWiki", ResponseNamespace:="urn:LyricWiki")>  _
        Public Function postSong(ByVal overwriteIfExists As Boolean, ByRef artist As String, ByRef song As String, ByVal lyrics As String, ByVal onAlbums() As String, ByRef message As String) As <System.Xml.Serialization.SoapElementAttribute("dataUsed")> Boolean
            Dim results() As Object = Me.Invoke("postSong", New Object() {overwriteIfExists, artist, song, lyrics, onAlbums})
            artist = CType(results(1),String)
            song = CType(results(2),String)
            message = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub postSongAsync(ByVal overwriteIfExists As Boolean, ByVal artist As String, ByVal song As String, ByVal lyrics As String, ByVal onAlbums() As String)
            Me.postSongAsync(overwriteIfExists, artist, song, lyrics, onAlbums, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub postSongAsync(ByVal overwriteIfExists As Boolean, ByVal artist As String, ByVal song As String, ByVal lyrics As String, ByVal onAlbums() As String, ByVal userState As Object)
            If (Me.postSongOperationCompleted Is Nothing) Then
                Me.postSongOperationCompleted = AddressOf Me.OnpostSongOperationCompleted
            End If
            Me.InvokeAsync("postSong", New Object() {overwriteIfExists, artist, song, lyrics, onAlbums}, Me.postSongOperationCompleted, userState)
        End Sub
        
        Private Sub OnpostSongOperationCompleted(ByVal arg As Object)
            If (Not (Me.postSongCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent postSongCompleted(Me, New postSongCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#postSong_flags", RequestNamespace:="urn:LyricWiki", ResponseNamespace:="urn:LyricWiki")>  _
        Public Function postSong_flags(ByVal overwriteIfExists As Boolean, ByRef artist As String, ByRef song As String, ByVal lyrics As String, ByVal onAlbums() As String, ByVal flags As String, ByRef message As String) As <System.Xml.Serialization.SoapElementAttribute("dataUsed")> Boolean
            Dim results() As Object = Me.Invoke("postSong_flags", New Object() {overwriteIfExists, artist, song, lyrics, onAlbums, flags})
            artist = CType(results(1),String)
            song = CType(results(2),String)
            message = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub postSong_flagsAsync(ByVal overwriteIfExists As Boolean, ByVal artist As String, ByVal song As String, ByVal lyrics As String, ByVal onAlbums() As String, ByVal flags As String)
            Me.postSong_flagsAsync(overwriteIfExists, artist, song, lyrics, onAlbums, flags, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub postSong_flagsAsync(ByVal overwriteIfExists As Boolean, ByVal artist As String, ByVal song As String, ByVal lyrics As String, ByVal onAlbums() As String, ByVal flags As String, ByVal userState As Object)
            If (Me.postSong_flagsOperationCompleted Is Nothing) Then
                Me.postSong_flagsOperationCompleted = AddressOf Me.OnpostSong_flagsOperationCompleted
            End If
            Me.InvokeAsync("postSong_flags", New Object() {overwriteIfExists, artist, song, lyrics, onAlbums, flags}, Me.postSong_flagsOperationCompleted, userState)
        End Sub
        
        Private Sub OnpostSong_flagsOperationCompleted(ByVal arg As Object)
            If (Not (Me.postSong_flagsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent postSong_flagsCompleted(Me, New postSong_flagsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="urn:LyricWiki")>  _
    Partial Public Class SongResult
        
        Private artistField As String
        
        Private songField As String
        
        '''<remarks/>
        Public Property artist() As String
            Get
                Return Me.artistField
            End Get
            Set
                Me.artistField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property song() As String
            Get
                Return Me.songField
            End Get
            Set
                Me.songField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="urn:LyricWiki")>  _
    Partial Public Class LyricsResult
        
        Private artistField As String
        
        Private songField As String
        
        Private lyricsField As String
        
        Private urlField As String
        
        '''<remarks/>
        Public Property artist() As String
            Get
                Return Me.artistField
            End Get
            Set
                Me.artistField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property song() As String
            Get
                Return Me.songField
            End Get
            Set
                Me.songField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property lyrics() As String
            Get
                Return Me.lyricsField
            End Get
            Set
                Me.lyricsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property url() As String
            Get
                Return Me.urlField
            End Get
            Set
                Me.urlField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="urn:LyricWiki")>  _
    Partial Public Class SOTDResult
        
        Private artistField As String
        
        Private songField As String
        
        Private nominatedByField As String
        
        Private reasonField As String
        
        Private lyricsField As String
        
        '''<remarks/>
        Public Property artist() As String
            Get
                Return Me.artistField
            End Get
            Set
                Me.artistField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property song() As String
            Get
                Return Me.songField
            End Get
            Set
                Me.songField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nominatedBy() As String
            Get
                Return Me.nominatedByField
            End Get
            Set
                Me.nominatedByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property reason() As String
            Get
                Return Me.reasonField
            End Get
            Set
                Me.reasonField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property lyrics() As String
            Get
                Return Me.lyricsField
            End Get
            Set
                Me.lyricsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub checkSongExistsCompletedEventHandler(ByVal sender As Object, ByVal e As checkSongExistsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkSongExistsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub searchArtistsCompletedEventHandler(ByVal sender As Object, ByVal e As searchArtistsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class searchArtistsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub searchAlbumsCompletedEventHandler(ByVal sender As Object, ByVal e As searchAlbumsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class searchAlbumsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub searchSongsCompletedEventHandler(ByVal sender As Object, ByVal e As searchSongsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class searchSongsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SongResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SongResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub getSOTDCompletedEventHandler(ByVal sender As Object, ByVal e As getSOTDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSOTDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SOTDResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SOTDResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub getSongCompletedEventHandler(ByVal sender As Object, ByVal e As getSongCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSongCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As LyricsResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LyricsResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub getSongResultCompletedEventHandler(ByVal sender As Object, ByVal e As getSongResultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSongResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As LyricsResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LyricsResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub getArtistCompletedEventHandler(ByVal sender As Object, ByVal e As getArtistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getArtistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property artist() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub getAlbumCompletedEventHandler(ByVal sender As Object, ByVal e As getAlbumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAlbumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property artist() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property album() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property year() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property songs() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub getHometownCompletedEventHandler(ByVal sender As Object, ByVal e As getHometownCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getHometownCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property state() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property hometown() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub postArtistCompletedEventHandler(ByVal sender As Object, ByVal e As postArtistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class postArtistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property artist() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property message() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub postAlbumCompletedEventHandler(ByVal sender As Object, ByVal e As postAlbumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class postAlbumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property artist() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property album() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property year() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property message() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub postSongCompletedEventHandler(ByVal sender As Object, ByVal e As postSongCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class postSongCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property artist() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property song() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property message() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")>  _
    Public Delegate Sub postSong_flagsCompletedEventHandler(ByVal sender As Object, ByVal e As postSong_flagsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class postSong_flagsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property artist() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property song() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property message() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
End Namespace
